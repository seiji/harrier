task :default => :build

task :build do
  puts "build"
end
# input
task :twitter_sample do
  require 'pit'
  TWITTER_CONFIG = Pit.get('twitter.com')
  puts "get twitter sample data"
  `curl https://stream.twitter.com/1/statuses/sample.json -u#{TWITTER_CONFIG['user']}:#{TWITTER_CONFIG['pass']} | mongoimport -d twitter -c sample`
end

task :twitter_itunes do
  require 'pit'
  TWITTER_CONFIG = Pit.get('twitter.com')
  puts "get twitter filter itunes"
  `curl https://stream.twitter.com/1/statuses/filter.json?track="itunes" -u#{TWITTER_CONFIG['user']}:#{TWITTER_CONFIG['pass']} | mongoimport -d twitter -c in`
end

# output
task :count_itunes do
  puts "counting itunes"
  `hadoop jar hadoop/mongo-hadoop-streaming-assembly*.jar -mapper hadoop/mapper_itunes_url.rb -reducer hadoop/reducer.rb -inputURI mongodb://127.0.0.1/twitter.itunes -outputURI mongodb://127.0.0.1/twitter.itunes_app`
end

task :extract_url do
  mongo_hadoop("hadoop/mapper_url.rb",
               "hadoop/reducer.rb",
               'mongodb://127.0.0.1/twitter.sample',
               'mongodb://127.0.0.1/twitter.url')
end

private
def mongo_hadoop(mapper  = "hadoop/mapper.rb",
                 reducer = "hadoop/reducer.rb",
                 input, output)
  raise "u require input and output" unless input || output
  `hadoop jar hadoop/mongo-hadoop-streaming-assembly*.jar -mapper #{mapper} -reducer #{reducer} -inputURI #{input} -outputURI #{output}`
end

